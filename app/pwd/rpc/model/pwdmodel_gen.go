// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pwdFieldNames          = builder.RawFieldNames(&Pwd{})
	pwdRows                = strings.Join(pwdFieldNames, ",")
	pwdRowsExpectAutoSet   = strings.Join(stringx.Remove(pwdFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	pwdRowsWithPlaceHolder = strings.Join(stringx.Remove(pwdFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePwdIdPrefix = "cache:pwd:id:"
)

type (
	pwdModel interface {
		Insert(ctx context.Context, data *Pwd) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Pwd, error)
		Update(ctx context.Context, data *Pwd) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPwdModel struct {
		sqlc.CachedConn
		table string
	}

	Pwd struct {
		Id        uint64       `db:"id"`
		Name      string       `db:"name"`       // 名称
		Url       string       `db:"url"`        // 链接
		Account   string       `db:"account"`    // 账号
		Pwd       string       `db:"pwd"`        // 密码
		Remark    string       `db:"remark"`     // 备注
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
		CreatedAt sql.NullTime `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime `db:"updated_at"` // 更新时间
	}
)

func newPwdModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPwdModel {
	return &defaultPwdModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`pwd`",
	}
}

func (m *defaultPwdModel) Delete(ctx context.Context, id uint64) error {
	pwdIdKey := fmt.Sprintf("%s%v", cachePwdIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, pwdIdKey)
	return err
}

func (m *defaultPwdModel) FindOne(ctx context.Context, id uint64) (*Pwd, error) {
	pwdIdKey := fmt.Sprintf("%s%v", cachePwdIdPrefix, id)
	var resp Pwd
	err := m.QueryRowCtx(ctx, &resp, pwdIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pwdRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPwdModel) Insert(ctx context.Context, data *Pwd) (sql.Result, error) {
	pwdIdKey := fmt.Sprintf("%s%v", cachePwdIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, pwdRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Url, data.Account, data.Pwd, data.Remark, data.DeletedAt)
	}, pwdIdKey)
	return ret, err
}

func (m *defaultPwdModel) Update(ctx context.Context, data *Pwd) error {
	pwdIdKey := fmt.Sprintf("%s%v", cachePwdIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pwdRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Url, data.Account, data.Pwd, data.Remark, data.DeletedAt, data.Id)
	}, pwdIdKey)
	return err
}

func (m *defaultPwdModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePwdIdPrefix, primary)
}

func (m *defaultPwdModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pwdRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPwdModel) tableName() string {
	return m.table
}
